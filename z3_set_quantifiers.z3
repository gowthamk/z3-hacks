(define-sort Set (T) (Array T Bool))
(define-fun set-union ((x (Set Int)) (y (Set Int)))
  (Set Int) ((_ map or) x y))
 (define-fun set-add ((a Int)(x (Set Int)))
   (Set Int) (store x a true) )
 (define-fun set-empty ()(Set Int)
   ((as const (Set Int)) false))
(declare-const S (Set Int))
(declare-const S1 (Set Int))
(declare-const S2 (Set Int))
(declare-const S3 (Set Int))
(declare-const k Int)
(assert (= S3 (set-add k S)))
(assert (forall ((x Int)) 
    (= (and (= (select S x) true) (not (= x k))) 
       (= (select S1 x) true))))
(assert (forall ((x Int)) 
    (= (and (= (select S3 x) true) (not (= x k))) 
       (= (select S2 x) true))))
(assert (not (= S1 S2)))
(check-sat)

