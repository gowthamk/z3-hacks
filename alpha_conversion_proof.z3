(declare-sort T0)
(declare-sort T1)
(declare-fun Rfv (T0 T1) Bool)
(declare-const e T0)
(declare-const e1 T0)
(declare-const e2 T0)
(declare-const res T0)
(declare-const id T1)
(declare-const id1 T1)
(assert (forall ((x T1)) (= (Rfv e x) (and (Rfv e1 x) (not (= x id))))))
(assert (forall ((x T1)) (=> (Rfv e1 x) (not (= x id1)))))
(assert (forall ((x T1)) (=> (Rfv e2 x) (or (and (Rfv e1 x) (not (= x id))) 
  (= x id1)))))
(assert (forall ((x T1)) (=> (and (Rfv e1 x) (not (= x id))) (Rfv e2 x))))
(assert (forall ((x T1)) (= (Rfv res x) (and (Rfv e2 x) (not (= x id1))))))
(assert (not (forall ((x T1)) (= (Rfv e x) (Rfv res x)))))
(check-sat)
(get-model)

;; New proof with type of subst as
;; (e1,id,e2) -> {e2' : exp | Rfv(e2') - Rfv(e1) = Rfv(e2) - {(id)}}
(declare-sort T0)
(declare-sort T1)
(declare-fun Rfv (T0 T1) Bool)
(declare-const e T0)
(declare-const e1 T0)
(declare-const e2 T0)
(declare-const res T0)
(declare-const id T1)
(declare-const id1 T1)
(assert (forall ((x T1)) (= (Rfv e x) (and (Rfv e1 x) (not (= x id))))))
(assert (forall ((x T1)) (=> (Rfv e1 x) (not (= x id1)))))
(assert (forall ((x T1)) (= (and (Rfv e2 x) (not (= x id1))) 
  (or (and (Rfv e1 x) (not (= x id)))) )))
(assert (forall ((x T1)) (= (Rfv res x) (and (Rfv e2 x) (not (= x id1))))))
(assert (not (forall ((x T1)) (= (Rfv e x) (Rfv res x)))))
(check-sat)
(get-model)



