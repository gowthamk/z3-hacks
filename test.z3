(declare-sort T5)
(declare-sort T6)
(declare-const e1 T5)
(declare-const id T6)
(declare-const e2 T5)
(declare-const |id'| T6)
(declare-const sv_4112 T5)
(declare-const anc_1041I Bool)
(declare-const sv_4116 Bool)
(declare-fun Rfv0 (T5 T6) Bool)
(declare-fun set35 (T6) Bool)
;; set35 = {(id')}
(assert (forall ((bv0 T6))
  (! (= (set35 bv0) (and (= bv0 |id'|))) :pattern ((set35 bv0)))))
;; Rfv(e2) = set35
(assert (forall ((bv0 T6))
  (! (= (Rfv0 e2 bv0) (set35 bv0))
     :pattern ((Rfv0 e2 bv0))
     :pattern ((set35 bv0)))))
(declare-fun set36 (T6) Bool)
;; set36 = {(id)}
(assert (forall ((bv0 T6))
  (! (= (set36 bv0) (and (= bv0 id))) :pattern ((set36 bv0)))))
(declare-fun set37 (T6) Bool)
;; set37 = {(id')}
(assert (forall ((bv0 T6))
  (! (= (set37 bv0) (and (= bv0 |id'|))) :pattern ((set37 bv0)))))
;; anc_1041I = true <=> set36 = set37
;;           => {(id)} = {(id')}
(assert (= (= anc_1041I true)
   (forall ((bv0 T6))
     (! (= (set36 bv0) (set37 bv0))
        :pattern ((set36 bv0))
        :pattern ((set37 bv0))))))
;; anc_1041I = true
(assert (= anc_1041I true))
(declare-fun set40 (T6) Bool)
;; set40 = Rfv(e2) - set36
;;       = {(id')} - {(id)}
(assert (forall ((bv0 T6))
  (! (= (set40 bv0) (and (Rfv0 e2 bv0) (not (set36 bv0))))
     :pattern ((set40 bv0))
     :pattern ((Rfv0 e2 bv0))
     :pattern ((set36 bv0)))))
(declare-fun set41 (T6) Bool)
;; set41 = Rfv(e1) U set40
;;       => set41 = Rfv(e1)
(assert (forall ((bv0 T6))
  (! (= (set41 bv0) (or (set40 bv0) (Rfv0 e1 bv0)))
     :pattern ((set41 bv0))
     :pattern ((set40 bv0))
     :pattern ((Rfv0 e1 bv0)))))
;; set36 c= Rfv(e1)  
(assert (let ((a!1 (or (forall ((bv0 T6))
                 (! (= (set36 bv0) (Rfv0 e1 bv0))
                    :pattern ((set36 bv0))
                    :pattern ((Rfv0 e1 bv0))))
               (forall ((bv0 T6))
                 (! (=> (set36 bv0) (Rfv0 e1 bv0))
                    :pattern ((set36 bv0))
                    :pattern ((Rfv0 e1 bv0))))))
      (a!3 (or (forall ((bv0 T6))
                 (! (= (set36 bv0) (Rfv0 e1 bv0))
                    :pattern ((set36 bv0))
                    :pattern ((Rfv0 e1 bv0))))
               (forall ((bv0 T6))
                 (! (=> (set36 bv0) (Rfv0 e1 bv0))
                    :pattern ((set36 bv0))
                    :pattern ((Rfv0 e1 bv0)))))))
;; set36 c= Rfv(e1) /\ Rfv(e1) = set41  
;; or
;; not (set36 c= Rfv(e1)) /\  Rfv(e1) = Rfv(e2)
(let ((a!2 (and a!1
                (forall ((bv0 T6))
                  (! (= (Rfv0 e1 bv0) (set41 bv0))
                     :pattern ((Rfv0 e1 bv0))
                     :pattern ((set41 bv0))))))
      (a!4 (and (not a!3)
                (forall ((bv0 T6))
                  (! (= (Rfv0 e1 bv0) (Rfv0 e2 bv0))
                     :pattern ((Rfv0 e1 bv0))
                     :pattern ((Rfv0 e2 bv0)))))))
  (not (or a!2 a!4)))))
(check-sat)
