;; Map axioms
(declare-sort T)
(declare-sort T0)
(declare-sort T1)
(declare-const l1 T)
(declare-const l2 T)
(declare-const b0 Bool)
(declare-const b1 Bool)
(declare-const b2 Bool)
(declare-fun Rmem (T T0) Bool)
(declare-fun R (T0 T1) Bool)
(declare-fun RmemR (T T1) Bool)
(assert (= b0 (forall ((k0 T0)(k1 T1)) (=> 
    (and (Rmem l1 k0) (R k0 k1))
    (RmemR l1 k1)
))))
(assert (= b1 (forall ((k1 T1)) (exists ((k0 T0)) (=>
    (RmemR l1 k1) 
    (and (Rmem l1 k0) (R k0 k1))
)))))
(assert (= b2 (forall ((k0 T0)(k1 T1)) (= 
    (and (Rmem l1 k0) (R k0 k1))
    (RmemR l1 k1)
))))
(assert (not (= b2 (and b0 b1))))
(check-sat)
(get-model)

;; When R is a function
(declare-sort T)
(declare-sort T0)
(declare-sort T1)
(declare-const l1 T)
(declare-const l2 T)
(declare-const b0 Bool)
(declare-const b1 Bool)
(declare-const b2 Bool)
(declare-fun Rmem (T T0) Bool)
(declare-fun R (T0) T1)
(declare-fun RmemR (T T1) Bool)
(assert (forall ((x T0) (y T0)) (=> (not (= x y))
  (not (= (R x) (R y)))
)))
(assert (= b0 (forall ((k0 T0)(k1 T1)) (=> 
    (and (Rmem l1 k0) (= (R k0) k1))
    (RmemR l1 k1)
))))
(assert (= b1 (forall ((k1 T1)) (exists ((k0 T0)) (=>
    (RmemR l1 k1) 
    (and (Rmem l1 k0) (= (R k0) k1))
)))))
(assert (= b2 (forall ((k0 T0)(k1 T1)) (= 
    (and (Rmem l1 k0) (= (R k0) k1))
    (RmemR l1 k1)
))))
(assert (not (= b2 (and b0 b1))))
(check-sat)
(get-model)
