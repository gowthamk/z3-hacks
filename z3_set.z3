(define-sort Set (T) (Array T Bool))
(define-fun set-union ((x (Set Int)) (y (Set Int)))
  (Set Int) ((_ map or) x y))
(define-fun set-xn ((x (Set Int)) (y (Set Int)))
  (Set Int) ((_ map and) x y))
(define-fun set-compl ((x (Set Int)))(Set Int) ((_ map not) x ))
(define-fun sub-set ((x (Set Int)) (y (Set Int)))
  (Bool) (= y (set-union x y)))
 (define-fun set-add ((a Int)(x (Set Int))) 
   (Set Int) (store x a true) )
 (define-fun set-empty ()(Set Int)
   ((as const (Set Int)) false))
(declare-const S (Set Int))
(declare-const S1 (Set Int))
(declare-const S11 (Set Int))
(declare-const S2 (Set Int))
(declare-const S3 (Set Int))
(declare-const xs (Set Int))
(declare-const xs1 (Set Int))
(declare-const x Int)
(declare-const x1 Int)

(assert (= xs (set-add x set-empty)))
(assert (= xs1 (set-add x1 set-empty)))
(assert (= S1 (set-union xs S11)))
(assert (= S3 (set-union S11 S2)))
(assert (= S (set-union xs S3)))
(assert (not (= S (sub-union S1 S3))))
(check-sat)
(get-model)
