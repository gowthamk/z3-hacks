;; This experiment is to see if the solver can solve first-order
;; constraints if we simplify unknown integer invariants to known
;; templates with unknown integers.
;; The three assert statements below denote three verification
;; conditions generated by performing Hoare-style verification on the
;; following code:
;;  PV1 (int y) {
;;    x := -50;
;;    while (x<0) {
;;      x := x+y;
;;      y++;
;;    }
;;    assert (y>0);
;;  }
;; The example taken from Gulwani et al's Program Analysis as
;; Constraint Solving paper.

(declare-const a1 Int)
(declare-const a2 Int)
(declare-const a3 Int)
(declare-const a4 Int)
(declare-const a5 Int)
(declare-const a6 Int)

(define-fun inv1 ((i Int) (j Int)) Bool
  (>= (+ (* a1 i) (* a2 j) a3) 0))

(define-fun inv2 ((i Int) (j Int)) Bool
  (>= (+ (* a4 i) (* a5 j) a6) 0))

(define-fun inv ((i Int) (j Int)) Bool
  (or (inv1 i j) (inv2 i j)))

(assert (forall ((x Int)(y Int)) 
  (=> (= x -50) (inv x y))))

(assert (forall ((x Int) (y Int))
  (=> (and (inv x y) (< x 0))
      (inv (+ x y) (+ y 1)))))

(assert (forall ((x Int) (y Int))
  (=> (and (inv x y) (>= x 0))
      (> y 0))))

(check-sat)
(get-model)
